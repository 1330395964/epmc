<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.gxuwz.project.system.grade.mapper.GradeMapper">
    
    <resultMap type="Grade" id="GradeResult">
        <result property="gradeId"    column="grade_id"    />
        <result property="gradeName"    column="grade_name"    />
        <result property="grade"    column="grade"    />
        <result property="majorId"    column="major_id"    />
        <association property="major" column="major_id" javaType="Major" resultMap="MajorResult"/>
    </resultMap>

    <resultMap type="Major" id="MajorResult">
        <result property="majorId"    column="major_id"    />
        <result property="majorName"    column="major_name"    />
        <result property="collegeId"    column="college_id"    />
    </resultMap>

    <sql id="selectGradeVo">
        select grade_id, grade_name, grade, major_id from sys_grade
    </sql>

    <select id="selectAllGrade" resultType="String">
        select distinct grade from sys_grade
    </select>

    <select id="selectGradeList" parameterType="Grade" resultMap="GradeResult">
        select g.grade_id, g.grade_name, g.grade, g.major_id , m.major_id, m.major_name, m.college_id from sys_grade g
        LEFT join sys_major  m on g.major_id = m.major_id
        <where>  
            <if test="gradeName != null  and gradeName != ''"> and g.grade_name like concat('%', #{gradeName}, '%')</if>
            <if test="grade != null  and grade != ''"> and g.grade = #{grade}</if>
            <if test="majorId != null "> and g.major_id = #{majorId}</if>
        </where>
    </select>
    
    <select id="selectGradeById" parameterType="Long" resultMap="GradeResult">
        <include refid="selectGradeVo"/>
        where grade_id = #{gradeId}
    </select>
        
    <insert id="insertGrade" parameterType="Grade" useGeneratedKeys="true" keyProperty="gradeId">
        insert into sys_grade
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="gradeName != null  and gradeName != ''">grade_name,</if>
            <if test="grade != null  and grade != ''">grade,</if>
            <if test="majorId != null ">major_id,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="gradeName != null  and gradeName != ''">#{gradeName},</if>
            <if test="grade != null  and grade != ''">#{grade},</if>
            <if test="majorId != null ">#{majorId},</if>
         </trim>
    </insert>

    <update id="updateGrade" parameterType="Grade">
        update sys_grade
        <trim prefix="SET" suffixOverrides=",">
            <if test="gradeName != null  and gradeName != ''">grade_name = #{gradeName},</if>
            <if test="grade != null  and grade != ''">grade = #{grade},</if>
            <if test="majorId != null ">major_id = #{majorId},</if>
        </trim>
        where grade_id = #{gradeId}
    </update>

    <delete id="deleteGradeById" parameterType="Long">
        delete from sys_grade where grade_id = #{gradeId}
    </delete>

    <delete id="deleteGradeByIds" parameterType="String">
        delete from sys_grade where grade_id in 
        <foreach item="gradeId" collection="array" open="(" separator="," close=")">
            #{gradeId}
        </foreach>
    </delete>
    
</mapper>